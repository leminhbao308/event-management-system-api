# Spring Boot Application Configuration
spring:
  application:
    name: event-management-api

  # Profile Configuration
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:event_management}
    username: ${DB_USERNAME:admin}
    password: ${DB_PASSWORD:123456}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      maximum-pool-size: 20
      minimum-idle: 5
      pool-name: HikariCP
      auto-commit: false

  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
          order_inserts: true
          order_updates: true
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DB:0}
      timeout: 60000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 30000ms

  # Security Configuration (Custom properties - will be handled in @ConfigurationProperties classes)
  # JWT configuration will be defined in separate configuration classes

  # Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  prometheus:
    metrics:
      export:
        enabled: true

# Logging Configuration
logging:
  level:
    "[com.leminhbao.eventmanagement]": ${LOG_LEVEL:INFO}
    "[org.springframework.security]": ${SECURITY_LOG_LEVEL:WARN}
    "[org.hibernate.SQL]": ${SQL_LOG_LEVEL:WARN}
    "[org.hibernate.type.descriptor.sql.BasicBinder]": ${SQL_PARAM_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/event-management-api.log

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: alpha
  packages-to-scan: com.leminhbao.eventmanagement.api.controller

# Application Specific Configuration
app:
  name: Event Management System API
  version: 1.0.0
  description: REST API for Event Management System
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  upload:
    max-file-size: ${MAX_FILE_SIZE:10MB}
    max-request-size: ${MAX_REQUEST_SIZE:50MB}
    temp-dir: ${UPLOAD_TEMP_DIR:./temp}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
logging:
  level:
    "[com.leminhbao.eventmanagement]": DEBUG
    "[org.hibernate.SQL]": DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
logging:
  level:
    "[com.leminhbao.eventmanagement]": WARN
    root: WARN
